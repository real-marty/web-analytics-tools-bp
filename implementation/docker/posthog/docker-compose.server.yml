version: "3.8"

services:
  db:
    image: "postgres:12-alpine"
    volumes:
      - "posthog-postgres-data:/var/lib/postgresql/data"
    environment:
      - POSTGRES_USER=posthog
      - POSTGRES_DB=posthog
      - POSTGRES_PASSWORD=$SERVICE_PASSWORD_POSTGRES
    healthcheck:
      test:
        - CMD-SHELL
        - "pg_isready -U posthog"
      interval: 2s
      timeout: 10s
      retries: 15
  redis:
    image: "redis:6.2.7-alpine"
    command: "redis-server --maxmemory-policy allkeys-lru --maxmemory 200mb"
  clickhouse:
    image: "clickhouse/clickhouse-server:23.11.2.11-alpine"
    volumes:
      - type: bind
        source: ./idl/events_dead_letter_queue.json
        target: /idl/events_dead_letter_queue.json
        content: "{\n  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n  \"$id\": \"file://posthog/idl/events_dead_letter_queue.json\",\n  \"title\": \"events_dead_letter_queue\",\n  \"description\": \"Events that failed to be validated or processed and are sent to the DLQ\",\n  \"type\": \"object\",\n  \"properties\": {\n      \"id\": {\n          \"description\": \"uuid for the submission\",\n          \"type\": \"string\"\n      },\n      \"event_uuid\": {\n          \"description\": \"uuid for the event\",\n          \"type\": \"string\"\n      },\n      \"event\": {\n          \"description\": \"event type\",\n          \"type\": \"string\"\n      },\n      \"properties\": {\n          \"description\": \"String representation of the properties json object\",\n          \"type\": \"string\"\n      },\n      \"distinct_id\": {\n          \"description\": \"PostHog distinct_id\",\n          \"type\": \"string\"\n      },\n      \"team_id\": {\n          \"description\": \"team_id (maps to the project under the organization)\",\n          \"type\": \"number\"\n      },\n      \"elements_chain\": {\n          \"description\": \"Used for autocapture. DOM element hierarchy\",\n          \"type\": \"string\"\n      },\n      \"created_at\": {\n          \"description\": \"Used for autocapture. DOM element hierarchy\",\n          \"type\": \"number\"\n      },\n      \"ip\": {\n          \"description\": \"IP Address of the associated with the event\",\n          \"type\": \"string\"\n      },\n      \"site_url\": {\n          \"description\": \"Site URL associated with the event the event\",\n          \"type\": \"string\"\n      },\n      \"now\": {\n          \"description\": \"Timestamp of the DLQ event\",\n          \"type\": \"number\"\n      },\n      \"raw_payload\": {\n          \"description\": \"Raw payload of the event that failed to be consumed\",\n          \"type\": \"string\"\n      },\n      \"error_timestamp\": {\n          \"description\": \"Timestamp that the error of ingestion occurred\",\n          \"type\": \"number\"\n      },\n      \"error_location\": {\n          \"description\": \"Source of error if known\",\n          \"type\": \"string\"\n      },\n      \"error\": {\n          \"description\": \"Error if known\",\n          \"type\": \"string\"\n      },\n      \"tags\": {\n          \"description\": \"Tags associated with the error or event\",\n          \"type\": \"array\",\n          \"items\": {\n              \"type\": \"string\"\n          }\n      }\n  },\n  \"required\": [\"raw_payload\"]\n}\n"
      - type: bind
        source: ./idl/events_json.json
        target: /idl/events_json.json
        content: "{\n  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n  \"$id\": \"file://posthog/idl/events_json.json\",\n  \"title\": \"events_json\",\n  \"description\": \"Event schema that is destined for ClickHouse\",\n  \"type\": \"object\",\n  \"properties\": {\n      \"uuid\": {\n          \"description\": \"uuid for the event\",\n          \"type\": \"string\"\n      },\n      \"event\": {\n          \"description\": \"event type\",\n          \"type\": \"string\"\n      },\n      \"properties\": {\n          \"description\": \"String representation of the properties json object\",\n          \"type\": \"string\"\n      },\n      \"timestamp\": {\n          \"description\": \"Timestamp that the event occurred\",\n          \"type\": \"number\"\n      },\n      \"team_id\": {\n          \"description\": \"team_id (maps to the project under the organization)\",\n          \"type\": \"number\"\n      },\n      \"distinct_id\": {\n          \"description\": \"PostHog distinct_id\",\n          \"type\": \"string\"\n      },\n      \"elements_chain\": {\n          \"description\": \"Used for autocapture. DOM element hierarchy\",\n          \"type\": \"string\"\n      },\n      \"created_at\": {\n          \"description\": \"Timestamp when event was created\",\n          \"type\": \"number\"\n      },\n      \"person_id\": {\n          \"description\": \"UUID for the associated person if available\",\n          \"type\": \"string\"\n      },\n      \"person_created_at\": {\n          \"description\": \"Timestamp for when the associated person was created\",\n          \"type\": \"number\"\n      },\n      \"person_properties\": {\n          \"description\": \"String representation of the person JSON object\",\n          \"type\": \"string\"\n      },\n      \"group0_properties\": {\n          \"description\": \"String representation of a group's properties\",\n          \"type\": \"string\"\n      },\n      \"group1_properties\": {\n          \"description\": \"String representation of a group's properties\",\n          \"type\": \"string\"\n      },\n      \"group2_properties\": {\n          \"description\": \"String representation of a group's properties\",\n          \"type\": \"string\"\n      },\n      \"group3_properties\": {\n          \"description\": \"String representation of a group's properties\",\n          \"type\": \"string\"\n      },\n      \"group4_properties\": {\n          \"description\": \"String representation of a group's properties\",\n          \"type\": \"string\"\n      },\n      \"group0_created_at\": {\n          \"description\": \"Group's creation timestamp\",\n          \"type\": \"number\"\n      },\n      \"group1_created_at\": {\n          \"description\": \"Group's creation timestamp\",\n          \"type\": \"number\"\n      },\n      \"group2_created_at\": {\n          \"description\": \"Group's creation timestamp\",\n          \"type\": \"number\"\n      },\n      \"group3_created_at\": {\n          \"description\": \"Group's creation timestamp\",\n          \"type\": \"number\"\n      },\n      \"group4_created_at\": {\n          \"description\": \"Group's creation timestamp\",\n          \"type\": \"number\"\n      }\n  },\n  \"required\": [\"uuid\", \"event\", \"properties\", \"timestamp\", \"team_id\"]\n}\n"
      - type: bind
        source: ./idl/groups.json
        target: /idl/groups.json
        content: "{\n  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n  \"$id\": \"file://posthog/idl/groups.json\",\n  \"title\": \"groups\",\n  \"description\": \"Groups schema that is destined for ClickHouse\",\n  \"type\": \"object\",\n  \"properties\": {\n      \"group_type_index\": {\n          \"description\": \"Group type index\",\n          \"type\": \"number\"\n      },\n      \"group_key\": {\n          \"description\": \"Group Key\",\n          \"type\": \"string\"\n      },\n      \"created_at\": {\n          \"description\": \"Group creation timestamp\",\n          \"type\": \"number\"\n      },\n      \"team_id\": {\n          \"description\": \"Team ID associated with group\",\n          \"type\": \"number\"\n      },\n      \"group_properties\": {\n          \"description\": \"String representation of group JSON properties object\",\n          \"type\": \"string\"\n      }\n  },\n  \"required\": [\"group_type_index\", \"group_key\", \"created_at\", \"team_id\", \"group_properties\"]\n}\n"
      - type: bind
        source: ./idl/idl.md
        target: /idl/idl.md
        content: "# IDL - Interface Definition Language\n\nThis directory is responsible for defining the schemas of the data between services.\nPrimarily this will be between services and ClickHouse, but can be really any thing at the boundry of services.\n\nThe reason why we do this is because it makes generating code, validating data, and understanding the system a whole lot easier. We've had a few customers request this of us for engineering a deeper integration with us.\n"
      - type: bind
        source: ./idl/person.json
        target: /idl/person.json
        content: "{\n  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n  \"$id\": \"file://posthog/idl/person.json\",\n  \"title\": \"person\",\n  \"description\": \"Person schema that is destined for ClickHouse\",\n  \"type\": \"object\",\n  \"properties\": {\n      \"id\": {\n          \"description\": \"UUID for the person\",\n          \"type\": \"string\"\n      },\n      \"created_at\": {\n          \"description\": \"Person creation timestamp\",\n          \"type\": \"number\"\n      },\n      \"team_id\": {\n          \"description\": \"Team ID associated with person\",\n          \"type\": \"number\"\n      },\n      \"properties\": {\n          \"description\": \"String representation of person JSON properties object\",\n          \"type\": \"string\"\n      },\n      \"is_identified\": {\n          \"description\": \"Boolean is the person identified?\",\n          \"type\": \"boolean\"\n      },\n      \"is_deleted\": {\n          \"description\": \"Boolean is the person deleted?\",\n          \"type\": \"boolean\"\n      },\n      \"version\": {\n          \"description\": \"Version field for collapsing later (psuedo-tombstone)\",\n          \"type\": \"number\"\n      }\n  },\n  \"required\": [\"id\", \"created_at\", \"team_id\", \"properties\", \"is_identified\", \"is_deleted\", \"version\"]\n}\n"
      - type: bind
        source: ./idl/person_distinct_id.json
        target: /idl/person_distinct_id.json
        content: "{\n  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n  \"$id\": \"file://posthog/idl/person_distinct_id.json\",\n  \"title\": \"person_distinct_id\",\n  \"description\": \"Person distinct id schema that is destined for ClickHouse\",\n  \"type\": \"object\",\n  \"properties\": {\n      \"distinct_id\": {\n          \"description\": \"User provided ID for the distinct user\",\n          \"type\": \"string\"\n      },\n      \"person_id\": {\n          \"description\": \"UUID of the person\",\n          \"type\": \"string\"\n      },\n      \"team_id\": {\n          \"description\": \"Team ID associated with person_distinct_id\",\n          \"type\": \"number\"\n      },\n      \"_sign\": {\n          \"description\": \"Used for collapsing later different versions of a distinct id (psuedo-tombstone)\",\n          \"type\": \"number\"\n      },\n      \"is_deleted\": {\n          \"description\": \"Boolean is the person distinct_id deleted?\",\n          \"type\": \"boolean\"\n      }\n  },\n  \"required\": [\"distinct_id\", \"person_id\", \"team_id\", \"_sign\", \"is_deleted\"]\n }\n"
      - type: bind
        source: ./idl/person_distinct_id2.json
        target: /idl/person_distinct_id2.json
        content: "{\n    \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n    \"$id\": \"file://posthog/idl/person_distinct_id2.json\",\n    \"title\": \"person_distinct_id2\",\n    \"description\": \"Person distinct id2 schema that is destined for ClickHouse\",\n    \"type\": \"object\",\n    \"properties\": {\n        \"distinct_id\": {\n            \"description\": \"User provided ID for the distinct user\",\n            \"type\": \"string\"\n        },\n        \"person_id\": {\n            \"description\": \"UUID of the person\",\n            \"type\": \"string\"\n        },\n        \"team_id\": {\n            \"description\": \"Team ID associated with person_distinct_id\",\n            \"type\": \"number\"\n        },\n        \"version\": {\n            \"description\": \"Used for collapsing later different versions of a distinct id (psuedo-tombstone)\",\n            \"type\": \"number\"\n        },\n        \"is_deleted\": {\n            \"description\": \"Boolean is the person distinct_id deleted?\",\n            \"type\": \"boolean\"\n        }\n    },\n    \"required\": [\"distinct_id\", \"person_id\", \"team_id\", \"version\", \"is_deleted\"]\n}\n"
      - type: bind
        source: ./idl/plugin_log_entries.json
        target: /idl/plugin_log_entries.json
        content: "{\n    \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n    \"$id\": \"file://posthog/idl/plugin_log_entries.json\",\n    \"title\": \"plugin_log_entries\",\n    \"description\": \"Plugin log entries that are destined for ClickHouse\",\n    \"type\": \"object\",\n    \"properties\": {\n        \"id\": {\n            \"description\": \"UUID for the log entry\",\n            \"type\": \"string\"\n        },\n        \"team_id\": {\n            \"description\": \"Team ID associated with person_distinct_id\",\n            \"type\": \"number\"\n        },\n        \"plugin_id\": {\n            \"description\": \"Plugin ID associated with the log entry\",\n            \"type\": \"number\"\n        },\n        \"plugin_config_id\": {\n            \"description\": \"Plugin Config ID associated with the log entry\",\n            \"type\": \"number\"\n        },\n        \"timestamp\": {\n            \"description\": \"Timestamp for when the log entry was created\",\n            \"type\": \"number\"\n        },\n        \"source\": {\n            \"description\": \"Source of the log entry\",\n            \"type\": \"string\"\n        },\n        \"type\": {\n            \"description\": \"Log entry type\",\n            \"type\": \"string\"\n        },\n        \"message\": {\n            \"description\": \"Log entry body\",\n            \"type\": \"string\"\n        },\n        \"instance_id\": {\n            \"description\": \"UUID of the instance that generated the log entry\",\n            \"type\": \"string\"\n        }\n    },\n    \"required\": [\n        \"id\",\n        \"team_id\",\n        \"plugin_id\",\n        \"plugin_config_id\",\n        \"timestamp\",\n        \"source\",\n        \"type\",\n        \"message\",\n        \"instance_id\"\n    ]\n}\n"
      - type: bind
        source: ./docker/clickhouse/docker-entrypoint-initdb.d/init-db.sh
        target: /docker-entrypoint-initdb.d/init-db.sh
        content: "#!/bin/bash\nset -e\n\ncp -r /idl/* /var/lib/clickhouse/format_schemas/\n"
      - type: bind
        source: ./docker/clickhouse/config.xml
        target: /etc/clickhouse-server/config.xml
        content: "<?xml version=\"1.0\"?>\n<!--\n  NOTE: User and query level settings are set up in \"users.xml\" file.\n  If you have accidentally specified user-level settings here, server won't start.\n  You can either move the settings to the right place inside \"users.xml\" file\n  or add <skip_check_for_incorrect_settings>1</skip_check_for_incorrect_settings> here.\n-->\n<yandex>\n    <logger>\n        <!-- Possible levels [1]:\n\n          - none (turns off logging)\n          - fatal\n          - critical\n          - error\n          - warning\n          - notice\n          - information\n          - debug\n          - trace\n          - test (not for production usage)\n\n            [1]:\n        https://github.com/pocoproject/poco/blob/poco-1.9.4-release/Foundation/include/Poco/Logger.h#L105-L114\n        -->\n        <level>trace</level>\n        <log>/var/log/clickhouse-server/clickhouse-server.log</log>\n        <errorlog>/var/log/clickhouse-server/clickhouse-server.err.log</errorlog>\n        <!-- Rotation policy\n            See\n        https://github.com/pocoproject/poco/blob/poco-1.9.4-release/Foundation/include/Poco/FileChannel.h#L54-L85\n          -->\n        <size>1000M</size>\n        <count>10</count>\n        <!-- <console>1</console> --> <!-- Default behavior is autodetection (log to console if not daemon mode\n        and is tty) -->\n\n        <!-- Per level overrides (legacy):\n\n        For example to suppress logging of the ConfigReloader you can use:\n        NOTE: levels.logger is reserved, see below.\n        -->\n        <!--\n        <levels>\n          <ConfigReloader>none</ConfigReloader>\n        </levels>\n        -->\n\n        <!-- Per level overrides:\n\n        For example to suppress logging of the RBAC for default user you can use:\n        (But please note that the logger name maybe changed from version to version, even after minor\n        upgrade)\n        -->\n        <!--\n        <levels>\n          <logger>\n            <name>ContextAccess (default)</name>\n            <level>none</level>\n          </logger>\n          <logger>\n            <name>DatabaseOrdinary (test)</name>\n            <level>none</level>\n          </logger>\n        </levels>\n        -->\n    </logger>\n\n    <!-- Add headers to response in options request. OPTIONS method is used in CORS preflight\n    requests. -->\n    <!-- It is off by default. Next headers are obligate for CORS.-->\n    <!-- http_options_response>\n        <header>\n            <name>Access-Control-Allow-Origin</name>\n            <value>*</value>\n        </header>\n        <header>\n            <name>Access-Control-Allow-Headers</name>\n            <value>origin, x-requested-with</value>\n        </header>\n        <header>\n            <name>Access-Control-Allow-Methods</name>\n            <value>POST, GET, OPTIONS</value>\n        </header>\n        <header>\n            <name>Access-Control-Max-Age</name>\n            <value>86400</value>\n        </header>\n    </http_options_response -->\n\n    <!-- It is the name that will be shown in the clickhouse-client.\n        By default, anything with \"production\" will be highlighted in red in query prompt.\n    -->\n    <!--display_name>production</display_name-->\n\n    <!-- Port for HTTP API. See also 'https_port' for secure connections.\n        This interface is also used by ODBC and JDBC drivers (DataGrip, Dbeaver, ...)\n        and by most of web interfaces (embedded UI, Grafana, Redash, ...).\n      -->\n    <http_port>8123</http_port>\n\n    <!-- Port for interaction by native protocol with:\n        - clickhouse-client and other native ClickHouse tools (clickhouse-benchmark, clickhouse-copier);\n        - clickhouse-server with other clickhouse-servers for distributed query processing;\n        - ClickHouse drivers and applications supporting native protocol\n        (this protocol is also informally called as \"the TCP protocol\");\n        See also 'tcp_port_secure' for secure connections.\n    -->\n    <tcp_port>9000</tcp_port>\n\n    <!-- Compatibility with MySQL protocol.\n        ClickHouse will pretend to be MySQL for applications connecting to this port.\n    -->\n    <mysql_port>9004</mysql_port>\n\n    <!-- Compatibility with PostgreSQL protocol.\n        ClickHouse will pretend to be PostgreSQL for applications connecting to this port.\n    -->\n    <postgresql_port>9005</postgresql_port>\n\n    <!-- HTTP API with TLS (HTTPS).\n        You have to configure certificate to enable this interface.\n        See the openSSL section below.\n    -->\n    <https_port>8443</https_port>\n\n    <!-- Native interface with TLS.\n        You have to configure certificate to enable this interface.\n        See the openSSL section below.\n    -->\n    <tcp_port_secure>9440</tcp_port_secure>\n\n    <!-- Native interface wrapped with PROXYv1 protocol\n        PROXYv1 header sent for every connection.\n        ClickHouse will extract information about proxy-forwarded client address from the header.\n    -->\n    <!-- <tcp_with_proxy_port>9011</tcp_with_proxy_port> -->\n\n    <!-- Port for communication between replicas. Used for data exchange.\n        It provides low-level data access between servers.\n        This port should not be accessible from untrusted networks.\n        See also 'interserver_http_credentials'.\n        Data transferred over connections to this port should not go through untrusted networks.\n        See also 'interserver_https_port'.\n      -->\n    <interserver_http_port>9009</interserver_http_port>\n\n    <!-- Port for communication between replicas with TLS.\n        You have to configure certificate to enable this interface.\n        See the openSSL section below.\n        See also 'interserver_http_credentials'.\n      -->\n    <!-- <interserver_https_port>9010</interserver_https_port> -->\n\n    <!-- Hostname that is used by other replicas to request this server.\n        If not specified, than it is determined analogous to 'hostname -f' command.\n        This setting could be used to switch replication to another network interface\n        (the server may be connected to multiple networks via multiple addresses)\n      -->\n\n    <!--\n    <interserver_http_host>example.yandex.ru</interserver_http_host>\n    -->\n\n    <!-- You can specify credentials for authenthication between replicas.\n        This is required when interserver_https_port is accessible from untrusted networks,\n        and also recommended to avoid SSRF attacks from possibly compromised services in your network.\n      -->\n    <!--<interserver_http_credentials>\n        <user>interserver</user>\n        <password></password>\n    </interserver_http_credentials>-->\n\n    <!-- Listen specified address.\n        Use :: (wildcard IPv6 address), if you want to accept connections both with IPv4 and IPv6 from\n    everywhere.\n        Notes:\n        If you open connections from wildcard address, make sure that at least one of the following\n    measures applied:\n        - server is protected by firewall and not accessible from untrusted networks;\n        - all users are restricted to subset of network addresses (see users.xml);\n        - all users have strong passwords, only secure (TLS) interfaces are accessible, or connections are\n    only made via TLS interfaces.\n        - users without password have readonly access.\n        See also: https://www.shodan.io/search?query=clickhouse\n      -->\n    <!-- <listen_host>::</listen_host> -->\n\n\n    <!-- Same for hosts without support for IPv6: -->\n    <!-- <listen_host>0.0.0.0</listen_host> -->\n\n    <!-- Default values - try listen localhost on IPv4 and IPv6. -->\n    <!--\n    <listen_host>::1</listen_host>\n    <listen_host>127.0.0.1</listen_host>\n    -->\n\n    <!-- Don't exit if IPv6 or IPv4 networks are unavailable while trying to listen. -->\n    <!-- <listen_try>0</listen_try> -->\n\n    <!-- Allow multiple servers to listen on the same address:port. This is not recommended.\n      -->\n    <!-- <listen_reuse_port>0</listen_reuse_port> -->\n\n    <!-- <listen_backlog>4096</listen_backlog> -->\n\n    <max_connections>4096</max_connections>\n\n    <!-- For 'Connection: keep-alive' in HTTP 1.1 -->\n    <keep_alive_timeout>3</keep_alive_timeout>\n\n    <!-- gRPC protocol (see src/Server/grpc_protos/clickhouse_grpc.proto for the API) -->\n    <!-- <grpc_port>9100</grpc_port> -->\n    <grpc>\n        <enable_ssl>false</enable_ssl>\n\n        <!-- The following two files are used only if enable_ssl=1 -->\n        <ssl_cert_file>/path/to/ssl_cert_file</ssl_cert_file>\n        <ssl_key_file>/path/to/ssl_key_file</ssl_key_file>\n\n        <!-- Whether server will request client for a certificate -->\n        <ssl_require_client_auth>false</ssl_require_client_auth>\n\n        <!-- The following file is used only if ssl_require_client_auth=1 -->\n        <ssl_ca_cert_file>/path/to/ssl_ca_cert_file</ssl_ca_cert_file>\n\n        <!-- Default transport compression type (can be overridden by client, see the\n        transport_compression_type field in QueryInfo).\n            Supported algorithms: none, deflate, gzip, stream_gzip -->\n        <transport_compression_type>none</transport_compression_type>\n\n        <!-- Default transport compression level. Supported levels: 0..3 -->\n        <transport_compression_level>0</transport_compression_level>\n\n        <!-- Send/receive message size limits in bytes. -1 means unlimited -->\n        <max_send_message_size>-1</max_send_message_size>\n        <max_receive_message_size>-1</max_receive_message_size>\n\n        <!-- Enable if you want very detailed logs -->\n        <verbose_logs>false</verbose_logs>\n    </grpc>\n\n    <!-- Used with https_port and tcp_port_secure. Full ssl options list:\n    https://github.com/ClickHouse-Extras/poco/blob/master/NetSSL_OpenSSL/include/Poco/Net/SSLManager.h#L71 -->\n    <openSSL>\n        <server> <!-- Used for https server AND secure tcp port -->\n            <!-- openssl req -subj \"/CN=localhost\" -new -newkey rsa:2048 -days 365 -nodes -x509\n            -keyout /etc/clickhouse-server/server.key -out /etc/clickhouse-server/server.crt -->\n            <certificateFile>/etc/clickhouse-server/server.crt</certificateFile>\n            <privateKeyFile>/etc/clickhouse-server/server.key</privateKeyFile>\n            <!-- dhparams are optional. You can delete the <dhParamsFile> element.\n                To generate dhparams, use the following command:\n                  openssl dhparam -out /etc/clickhouse-server/dhparam.pem 4096\n                Only file format with BEGIN DH PARAMETERS is supported.\n              -->\n            <dhParamsFile>/etc/clickhouse-server/dhparam.pem</dhParamsFile>\n            <verificationMode>none</verificationMode>\n            <loadDefaultCAFile>true</loadDefaultCAFile>\n            <cacheSessions>true</cacheSessions>\n            <disableProtocols>sslv2,sslv3</disableProtocols>\n            <preferServerCiphers>true</preferServerCiphers>\n        </server>\n\n        <client> <!-- Used for connecting to https dictionary source and secured Zookeeper\n            communication -->\n            <loadDefaultCAFile>true</loadDefaultCAFile>\n            <cacheSessions>true</cacheSessions>\n            <disableProtocols>sslv2,sslv3</disableProtocols>\n            <preferServerCiphers>true</preferServerCiphers>\n            <!-- Use for self-signed: <verificationMode>none</verificationMode> -->\n            <invalidCertificateHandler>\n                <!-- Use for self-signed: <name>AcceptCertificateHandler</name> -->\n                <name>RejectCertificateHandler</name>\n            </invalidCertificateHandler>\n        </client>\n    </openSSL>\n\n    <!-- Default root page on http[s] server. For example load UI from https://tabix.io/ when\n    opening http://localhost:8123 -->\n    <!--\n    <http_server_default_response><![CDATA[<html ng-app=\"SMI2\"><head><base\n    href=\"http://ui.tabix.io/\"></head><body><div ui-view=\"\" class=\"content-ui\"></div><script\n    src=\"http://loader.tabix.io/master.js\"></script></body></html>]]></http_server_default_response>\n    -->\n\n    <!-- Maximum number of concurrent queries. -->\n    <max_concurrent_queries>100</max_concurrent_queries>\n\n    <!-- Maximum memory usage (resident set size) for server process.\n        Zero value or unset means default. Default is \"max_server_memory_usage_to_ram_ratio\" of available\n    physical RAM.\n        If the value is larger than \"max_server_memory_usage_to_ram_ratio\" of available physical RAM, it\n    will be cut down.\n\n        The constraint is checked on query execution time.\n        If a query tries to allocate memory and the current memory usage plus allocation is greater\n          than specified threshold, exception will be thrown.\n\n        It is not practical to set this constraint to small values like just a few gigabytes,\n          because memory allocator will keep this amount of memory in caches and the server will deny service\n    of queries.\n      -->\n    <max_server_memory_usage>0</max_server_memory_usage>\n\n    <!-- Maximum number of threads in the Global thread pool.\n    This will default to a maximum of 10000 threads if not specified.\n    This setting will be useful in scenarios where there are a large number\n    of distributed queries that are running concurrently but are idling most\n    of the time, in which case a higher number of threads might be required.\n    -->\n\n    <max_thread_pool_size>10000</max_thread_pool_size>\n\n    <!-- Number of workers to recycle connections in background (see also drain_timeout).\n        If the pool is full, connection will be drained synchronously. -->\n    <!-- <max_threads_for_connection_collector>10</max_threads_for_connection_collector> -->\n\n    <!-- On memory constrained environments you may have to set this to value larger than 1.\n      -->\n    <max_server_memory_usage_to_ram_ratio>0.9</max_server_memory_usage_to_ram_ratio>\n\n    <!-- Simple server-wide memory profiler. Collect a stack trace at every peak allocation step (in\n    bytes).\n        Data will be stored in system.trace_log table with query_id = empty string.\n        Zero means disabled.\n      -->\n    <total_memory_profiler_step>4194304</total_memory_profiler_step>\n\n    <!-- Collect random allocations and deallocations and write them into system.trace_log with\n    'MemorySample' trace_type.\n        The probability is for every alloc/free regardless to the size of the allocation.\n        Note that sampling happens only when the amount of untracked memory exceeds the untracked memory\n    limit,\n          which is 4 MiB by default but can be lowered if 'total_memory_profiler_step' is lowered.\n        You may want to set 'total_memory_profiler_step' to 1 for extra fine grained sampling.\n      -->\n    <total_memory_tracker_sample_probability>0</total_memory_tracker_sample_probability>\n\n    <!-- Set limit on number of open files (default: maximum). This setting makes sense on Mac OS X\n    because getrlimit() fails to retrieve\n        correct maximum value. -->\n    <!-- <max_open_files>262144</max_open_files> -->\n\n    <!-- Size of cache of uncompressed blocks of data, used in tables of MergeTree family.\n        In bytes. Cache is single for server. Memory is allocated only on demand.\n        Cache is used when 'use_uncompressed_cache' user setting turned on (off by default).\n        Uncompressed cache is advantageous only for very short queries and in rare cases.\n\n        Note: uncompressed cache can be pointless for lz4, because memory bandwidth\n        is slower than multi-core decompression on some server configurations.\n        Enabling it can sometimes paradoxically make queries slower.\n      -->\n    <uncompressed_cache_size>8589934592</uncompressed_cache_size>\n\n    <!-- Approximate size of mark cache, used in tables of MergeTree family.\n        In bytes. Cache is single for server. Memory is allocated only on demand.\n        You should not lower this value.\n      -->\n    <mark_cache_size>5368709120</mark_cache_size>\n\n\n    <!-- If you enable the `min_bytes_to_use_mmap_io` setting,\n        the data in MergeTree tables can be read with mmap to avoid copying from kernel to userspace.\n        It makes sense only for large files and helps only if data reside in page cache.\n        To avoid frequent open/mmap/munmap/close calls (which are very expensive due to consequent page\n    faults)\n        and to reuse mappings from several threads and queries,\n        the cache of mapped files is maintained. Its size is the number of mapped regions (usually equal to\n    the number of mapped files).\n        The amount of data in mapped files can be monitored\n        in system.metrics, system.metric_log by the MMappedFiles, MMappedFileBytes metrics\n        and in system.asynchronous_metrics, system.asynchronous_metrics_log by the MMapCacheCells metric,\n        and also in system.events, system.processes, system.query_log, system.query_thread_log,\n    system.query_views_log by the\n        CreatedReadBufferMMap, CreatedReadBufferMMapFailed, MMappedFileCacheHits, MMappedFileCacheMisses\n    events.\n        Note that the amount of data in mapped files does not consume memory directly and is not accounted\n        in query or server memory usage - because this memory can be discarded similar to OS page cache.\n        The cache is dropped (the files are closed) automatically on removal of old parts in MergeTree,\n        also it can be dropped manually by the SYSTEM DROP MMAP CACHE query.\n      -->\n    <mmap_cache_size>1000</mmap_cache_size>\n\n    <!-- Cache size in bytes for compiled expressions.-->\n    <compiled_expression_cache_size>134217728</compiled_expression_cache_size>\n\n    <!-- Cache size in elements for compiled expressions.-->\n    <compiled_expression_cache_elements_size>10000</compiled_expression_cache_elements_size>\n\n    <!-- Path to data directory, with trailing slash. -->\n    <path>/var/lib/clickhouse/</path>\n\n    <!-- Path to temporary data for processing hard queries. -->\n    <tmp_path>/var/lib/clickhouse/tmp/</tmp_path>\n\n    <!-- Policy from the <storage_configuration> for the temporary files.\n        If not set <tmp_path> is used, otherwise <tmp_path> is ignored.\n\n        Notes:\n        - move_factor              is ignored\n        - keep_free_space_bytes    is ignored\n        - max_data_part_size_bytes is ignored\n        - you must have exactly one volume in that policy\n    -->\n    <!-- <tmp_policy>tmp</tmp_policy> -->\n\n    <!-- Directory with user provided files that are accessible by 'file' table function. -->\n    <user_files_path>/var/lib/clickhouse/user_files/</user_files_path>\n\n    <!-- LDAP server definitions. -->\n    <ldap_servers>\n        <!-- List LDAP servers with their connection parameters here to later 1) use them as\n        authenticators for dedicated local users,\n              who have 'ldap' authentication mechanism specified instead of 'password', or to 2) use them as\n        remote user directories.\n            Parameters:\n                host - LDAP server hostname or IP, this parameter is mandatory and cannot be empty.\n                port - LDAP server port, default is 636 if enable_tls is set to true, 389 otherwise.\n                bind_dn - template used to construct the DN to bind to.\n                        The resulting DN will be constructed by replacing all '{user_name}' substrings of the template with\n        the actual\n                        user name during each authentication attempt.\n                user_dn_detection - section with LDAP search parameters for detecting the actual user DN of the\n        bound user.\n                        This is mainly used in search filters for further role mapping when the server is Active Directory.\n        The\n                        resulting user DN will be used when replacing '{user_dn}' substrings wherever they are allowed. By\n        default,\n                        user DN is set equal to bind DN, but once search is performed, it will be updated with to the\n        actual detected\n                        user DN value.\n                    base_dn - template used to construct the base DN for the LDAP search.\n                            The resulting DN will be constructed by replacing all '{user_name}' and '{bind_dn}' substrings\n                            of the template with the actual user name and bind DN during the LDAP search.\n                    scope - scope of the LDAP search.\n                            Accepted values are: 'base', 'one_level', 'children', 'subtree' (the default).\n                    search_filter - template used to construct the search filter for the LDAP search.\n                            The resulting filter will be constructed by replacing all '{user_name}', '{bind_dn}', and\n        '{base_dn}'\n                            substrings of the template with the actual user name, bind DN, and base DN during the LDAP search.\n                            Note, that the special characters must be escaped properly in XML.\n                verification_cooldown - a period of time, in seconds, after a successful bind attempt, during which\n        a user will be assumed\n                        to be successfully authenticated for all consecutive requests without contacting the LDAP server.\n                        Specify 0 (the default) to disable caching and force contacting the LDAP server for each\n        authentication request.\n                enable_tls - flag to trigger use of secure connection to the LDAP server.\n                        Specify 'no' for plain text (ldap://) protocol (not recommended).\n                        Specify 'yes' for LDAP over SSL/TLS (ldaps://) protocol (recommended, the default).\n                        Specify 'starttls' for legacy StartTLS protocol (plain text (ldap://) protocol, upgraded to TLS).\n                tls_minimum_protocol_version - the minimum protocol version of SSL/TLS.\n                        Accepted values are: 'ssl2', 'ssl3', 'tls1.0', 'tls1.1', 'tls1.2' (the default).\n                tls_require_cert - SSL/TLS peer certificate verification behavior.\n                        Accepted values are: 'never', 'allow', 'try', 'demand' (the default).\n                tls_cert_file - path to certificate file.\n                tls_key_file - path to certificate key file.\n                tls_ca_cert_file - path to CA certificate file.\n                tls_ca_cert_dir - path to the directory containing CA certificates.\n                tls_cipher_suite - allowed cipher suite (in OpenSSL notation).\n            Example:\n                <my_ldap_server>\n                    <host>localhost</host>\n                    <port>636</port>\n                    <bind_dn>uid={user_name},ou=users,dc=example,dc=com</bind_dn>\n                    <verification_cooldown>300</verification_cooldown>\n                    <enable_tls>yes</enable_tls>\n                    <tls_minimum_protocol_version>tls1.2</tls_minimum_protocol_version>\n                    <tls_require_cert>demand</tls_require_cert>\n                    <tls_cert_file>/path/to/tls_cert_file</tls_cert_file>\n                    <tls_key_file>/path/to/tls_key_file</tls_key_file>\n                    <tls_ca_cert_file>/path/to/tls_ca_cert_file</tls_ca_cert_file>\n                    <tls_ca_cert_dir>/path/to/tls_ca_cert_dir</tls_ca_cert_dir>\n        <tls_cipher_suite>ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:AES256-GCM-SHA384</tls_cipher_suite>\n                </my_ldap_server>\n            Example (typical Active Directory with configured user DN detection for further role mapping):\n                <my_ad_server>\n                    <host>localhost</host>\n                    <port>389</port>\n                    <bind_dn>EXAMPLE\\{user_name}</bind_dn>\n                    <user_dn_detection>\n                        <base_dn>CN=Users,DC=example,DC=com</base_dn>\n                        <search_filter>(&amp;(objectClass=user)(sAMAccountName={user_name}))</search_filter>\n                    </user_dn_detection>\n                    <enable_tls>no</enable_tls>\n                </my_ad_server>\n        -->\n    </ldap_servers>\n\n    <!-- To enable Kerberos authentication support for HTTP requests (GSS-SPNEGO), for those users\n    who are explicitly configured\n          to authenticate via Kerberos, define a single 'kerberos' section here.\n        Parameters:\n            principal - canonical service principal name, that will be acquired and used when accepting\n    security contexts.\n                    This parameter is optional, if omitted, the default principal will be used.\n                    This parameter cannot be specified together with 'realm' parameter.\n            realm - a realm, that will be used to restrict authentication to only those requests whose\n    initiator's realm matches it.\n                    This parameter is optional, if omitted, no additional filtering by realm will be applied.\n                    This parameter cannot be specified together with 'principal' parameter.\n        Example:\n            <kerberos />\n        Example:\n            <kerberos>\n                <principal>HTTP/clickhouse.example.com@EXAMPLE.COM</principal>\n            </kerberos>\n        Example:\n            <kerberos>\n                <realm>EXAMPLE.COM</realm>\n            </kerberos>\n    -->\n\n    <!-- Sources to read users, roles, access rights, profiles of settings, quotas. -->\n    <user_directories>\n        <users_xml>\n            <!-- Path to configuration file with predefined users. -->\n            <path>users.xml</path>\n        </users_xml>\n        <local_directory>\n            <!-- Path to folder where users created by SQL commands are stored. -->\n            <path>/var/lib/clickhouse/access/</path>\n        </local_directory>\n\n        <!-- To add an LDAP server as a remote user directory of users that are not defined locally,\n        define a single 'ldap' section\n              with the following parameters:\n                server - one of LDAP server names defined in 'ldap_servers' config section above.\n                        This parameter is mandatory and cannot be empty.\n                roles - section with a list of locally defined roles that will be assigned to each user retrieved\n        from the LDAP server.\n                        If no roles are specified here or assigned during role mapping (below), user will not be able to\n        perform any\n                        actions after authentication.\n                role_mapping - section with LDAP search parameters and mapping rules.\n                        When a user authenticates, while still bound to LDAP, an LDAP search is performed using\n        search_filter and the\n                        name of the logged in user. For each entry found during that search, the value of the specified\n        attribute is\n                        extracted. For each attribute value that has the specified prefix, the prefix is removed, and the\n        rest of the\n                        value becomes the name of a local role defined in ClickHouse, which is expected to be created\n        beforehand by\n                        CREATE ROLE command.\n                        There can be multiple 'role_mapping' sections defined inside the same 'ldap' section. All of them\n        will be\n                        applied.\n                    base_dn - template used to construct the base DN for the LDAP search.\n                            The resulting DN will be constructed by replacing all '{user_name}', '{bind_dn}', and '{user_dn}'\n                            substrings of the template with the actual user name, bind DN, and user DN during each LDAP search.\n                    scope - scope of the LDAP search.\n                            Accepted values are: 'base', 'one_level', 'children', 'subtree' (the default).\n                    search_filter - template used to construct the search filter for the LDAP search.\n                            The resulting filter will be constructed by replacing all '{user_name}', '{bind_dn}', '{user_dn}',\n        and\n                            '{base_dn}' substrings of the template with the actual user name, bind DN, user DN, and base DN\n        during\n                            each LDAP search.\n                            Note, that the special characters must be escaped properly in XML.\n                    attribute - attribute name whose values will be returned by the LDAP search. 'cn', by default.\n                    prefix - prefix, that will be expected to be in front of each string in the original list of\n        strings returned by\n                            the LDAP search. Prefix will be removed from the original strings and resulting strings will be\n        treated\n                            as local role names. Empty, by default.\n            Example:\n                <ldap>\n                    <server>my_ldap_server</server>\n                    <roles>\n                        <my_local_role1 />\n                        <my_local_role2 />\n                    </roles>\n                    <role_mapping>\n                        <base_dn>ou=groups,dc=example,dc=com</base_dn>\n                        <scope>subtree</scope>\n                        <search_filter>(&amp;(objectClass=groupOfNames)(member={bind_dn}))</search_filter>\n                        <attribute>cn</attribute>\n                        <prefix>clickhouse_</prefix>\n                    </role_mapping>\n                </ldap>\n            Example (typical Active Directory with role mapping that relies on the detected user DN):\n                <ldap>\n                    <server>my_ad_server</server>\n                    <role_mapping>\n                        <base_dn>CN=Users,DC=example,DC=com</base_dn>\n                        <attribute>CN</attribute>\n                        <scope>subtree</scope>\n                        <search_filter>(&amp;(objectClass=group)(member={user_dn}))</search_filter>\n                        <prefix>clickhouse_</prefix>\n                    </role_mapping>\n                </ldap>\n        -->\n    </user_directories>\n\n    <!-- Default profile of settings. -->\n    <default_profile>default</default_profile>\n\n    <!-- Comma-separated list of prefixes for user-defined settings. -->\n    <custom_settings_prefixes></custom_settings_prefixes>\n\n    <!-- System profile of settings. This settings are used by internal processes (Distributed DDL\n    worker and so on). -->\n    <!-- <system_profile>default</system_profile> -->\n\n    <!-- Buffer profile of settings.\n        This settings are used by Buffer storage to flush data to the underlying table.\n        Default: used from system_profile directive.\n    -->\n    <!-- <buffer_profile>default</buffer_profile> -->\n\n    <!-- Default database. -->\n    <default_database>default</default_database>\n\n    <!-- Server time zone could be set here.\n\n        Time zone is used when converting between String and DateTime types,\n          when printing DateTime in text formats and parsing DateTime from text,\n          it is used in date and time related functions, if specific time zone was not passed as an argument.\n\n        Time zone is specified as identifier from IANA time zone database, like UTC or Africa/Abidjan.\n        If not specified, system time zone at server startup is used.\n\n        Please note, that server could display time zone alias instead of specified name.\n        Example: W-SU is an alias for Europe/Moscow and Zulu is an alias for UTC.\n    -->\n    <!-- <timezone>Europe/Moscow</timezone> -->\n\n    <!-- You can specify umask here (see \"man umask\"). Server will apply it on startup.\n        Number is always parsed as octal. Default umask is 027 (other users cannot read logs, data files,\n    etc; group can only read).\n    -->\n    <!-- <umask>022</umask> -->\n\n    <!-- Perform mlockall after startup to lower first queries latency\n          and to prevent clickhouse executable from being paged out under high IO load.\n        Enabling this option is recommended but will lead to increased startup time for up to a few\n    seconds.\n    -->\n    <mlock_executable>true</mlock_executable>\n\n    <!-- Reallocate memory for machine code (\"text\") using huge pages. Highly experimental. -->\n    <remap_executable>false</remap_executable>\n\n    <![CDATA[\n        Uncomment below in order to use JDBC table engine and function.\n\n        To install and run JDBC bridge in background:\n        * [Debian/Ubuntu]\n          export MVN_URL=https://repo1.maven.org/maven2/ru/yandex/clickhouse/clickhouse-jdbc-bridge\n          export PKG_VER=$(curl -sL $MVN_URL/maven-metadata.xml | grep '<release>' | sed -e 's|.*>\\(.*\\)<.*|\\1|')\n          wget https://github.com/ClickHouse/clickhouse-jdbc-bridge/releases/download/v$PKG_VER/clickhouse-jdbc-bridge_$PKG_VER-1_all.deb\n          apt install --no-install-recommends -f ./clickhouse-jdbc-bridge_$PKG_VER-1_all.deb\n          clickhouse-jdbc-bridge &\n\n        * [CentOS/RHEL]\n          export MVN_URL=https://repo1.maven.org/maven2/ru/yandex/clickhouse/clickhouse-jdbc-bridge\n          export PKG_VER=$(curl -sL $MVN_URL/maven-metadata.xml | grep '<release>' | sed -e 's|.*>\\(.*\\)<.*|\\1|')\n          wget https://github.com/ClickHouse/clickhouse-jdbc-bridge/releases/download/v$PKG_VER/clickhouse-jdbc-bridge-$PKG_VER-1.noarch.rpm\n          yum localinstall -y clickhouse-jdbc-bridge-$PKG_VER-1.noarch.rpm\n          clickhouse-jdbc-bridge &\n\n        Please refer to https://github.com/ClickHouse/clickhouse-jdbc-bridge#usage for more information.\n    ]]>\n    <!--\n    <jdbc_bridge>\n        <host>127.0.0.1</host>\n        <port>9019</port>\n    </jdbc_bridge>\n    -->\n\n    <!-- Configuration of clusters that could be used in Distributed tables.\n        https://clickhouse.com/docs/en/operations/table_engines/distributed/\n      -->\n    <remote_servers>\n\n        <!-- Test only shard config for testing distributed storage -->\n        <posthog>\n            <!-- Inter-server per-cluster secret for Distributed queries\n                default: no secret (no authentication will be performed)\n\n                If set, then Distributed queries will be validated on shards, so at least:\n                - such cluster should exist on the shard,\n                - such cluster should have the same secret.\n\n                And also (and which is more important), the initial_user will\n                be used as current user for the query.\n\n                Right now the protocol is pretty simple and it only takes into account:\n                - cluster name\n                - query\n\n                Also it will be nice if the following will be implemented:\n                - source hostname (see interserver_http_host), but then it will depends from DNS,\n                  it can use IP address instead, but then the you need to get correct on the initiator node.\n                - target hostname / ip address (same notes as for source hostname)\n                - time-based security tokens\n            -->\n            <!-- <secret></secret> -->\n\n            <shard>\n                <!-- Optional. Whether to write data to just one of the replicas. Default: false\n                (write data to all replicas). -->\n                <!-- <internal_replication>false</internal_replication> -->\n                <!-- Optional. Shard weight when writing data. Default: 1. -->\n                <!-- <weight>1</weight> -->\n                <replica>\n                    <host>localhost</host>\n                    <port>9000</port>\n                    <!-- Optional. Priority of the replica for load_balancing. Default: 1 (less\n                    value has more priority). -->\n                    <!-- <priority>1</priority> -->\n                </replica>\n            </shard>\n        </posthog>\n    </remote_servers>\n\n    <!-- The list of hosts allowed to use in URL-related storage engines and table functions.\n        If this section is not present in configuration, all hosts are allowed.\n    -->\n    <remote_url_allow_hosts>\n        <!-- Host should be specified exactly as in URL. The name is checked before DNS resolution.\n            Example: \"yandex.ru\", \"yandex.ru.\" and \"www.yandex.ru\" are different hosts.\n                    If port is explicitly specified in URL, the host:port is checked as a whole.\n                    If host specified here without port, any port with this host allowed.\n                    \"yandex.ru\" -> \"yandex.ru:443\", \"yandex.ru:80\" etc. is allowed, but \"yandex.ru:80\" -> only\n        \"yandex.ru:80\" is allowed.\n            If the host is specified as IP address, it is checked as specified in URL. Example:\n        \"[2a02:6b8:a::a]\".\n            If there are redirects and support for redirects is enabled, every redirect (the Location field) is\n        checked.\n            Host should be specified using the host xml tag:\n                    <host>yandex.ru</host>\n        -->\n\n        <!-- Regular expression can be specified. RE2 engine is used for regexps.\n            Regexps are not aligned: don't forget to add ^ and $. Also don't forget to escape dot (.)\n        metacharacter\n            (forgetting to do so is a common source of error).\n        -->\n        <host_regexp>.*</host_regexp>\n    </remote_url_allow_hosts>\n\n    <!-- If element has 'incl' attribute, then for it's value will be used corresponding\n    substitution from another file.\n        By default, path to file with substitutions is /etc/metrika.xml. It could be changed in config in\n    'include_from' element.\n        Values for substitutions are specified in /clickhouse/name_of_substitution elements in that file.\n      -->\n\n    <!-- ZooKeeper is used to store metadata about replicas, when using Replicated tables.\n        Optional. If you don't use replicated tables, you could omit that.\n\n        See https://clickhouse.com/docs/en/engines/table-engines/mergetree-family/replication/\n      -->\n\n    <zookeeper>\n        <node>\n            <host>zookeeper</host>\n            <port>2181</port>\n        </node>\n    </zookeeper>\n\n    <!-- Substitutions for parameters of replicated tables.\n          Optional. If you don't use replicated tables, you could omit that.\n\n        See\n    https://clickhouse.com/docs/en/engines/table-engines/mergetree-family/replication/#creating-replicated-tables\n      -->\n\n    <macros>\n        <shard>01</shard>\n        <replica>ch1</replica>\n    </macros>\n\n\n    <!-- Reloading interval for embedded dictionaries, in seconds. Default: 3600. -->\n    <builtin_dictionaries_reload_interval>3600</builtin_dictionaries_reload_interval>\n\n\n    <!-- Maximum session timeout, in seconds. Default: 3600. -->\n    <max_session_timeout>3600</max_session_timeout>\n\n    <!-- Default session timeout, in seconds. Default: 60. -->\n    <default_session_timeout>60</default_session_timeout>\n\n    <!-- Sending data to Graphite for monitoring. Several sections can be defined. -->\n    <!--\n        interval - send every X second\n        root_path - prefix for keys\n        hostname_in_path - append hostname to root_path (default = true)\n        metrics - send data from table system.metrics\n        events - send data from table system.events\n        asynchronous_metrics - send data from table system.asynchronous_metrics\n    -->\n    <!--\n    <graphite>\n        <host>localhost</host>\n        <port>42000</port>\n        <timeout>0.1</timeout>\n        <interval>60</interval>\n        <root_path>one_min</root_path>\n        <hostname_in_path>true</hostname_in_path>\n\n        <metrics>true</metrics>\n        <events>true</events>\n        <events_cumulative>false</events_cumulative>\n        <asynchronous_metrics>true</asynchronous_metrics>\n    </graphite>\n    <graphite>\n        <host>localhost</host>\n        <port>42000</port>\n        <timeout>0.1</timeout>\n        <interval>1</interval>\n        <root_path>one_sec</root_path>\n\n        <metrics>true</metrics>\n        <events>true</events>\n        <events_cumulative>false</events_cumulative>\n        <asynchronous_metrics>false</asynchronous_metrics>\n    </graphite>\n    -->\n\n    <!-- Serve endpoint for Prometheus monitoring. -->\n    <!--\n        endpoint - mertics path (relative to root, statring with \"/\")\n        port - port to setup server. If not defined or 0 than http_port used\n        metrics - send data from table system.metrics\n        events - send data from table system.events\n        asynchronous_metrics - send data from table system.asynchronous_metrics\n        status_info - send data from different component from CH, ex: Dictionaries status\n    -->\n    <!--\n    <prometheus>\n        <endpoint>/metrics</endpoint>\n        <port>9363</port>\n\n        <metrics>true</metrics>\n        <events>true</events>\n        <asynchronous_metrics>true</asynchronous_metrics>\n        <status_info>true</status_info>\n    </prometheus>\n    -->\n\n    <!-- Query log. Used only for queries with setting log_queries = 1. -->\n    <query_log>\n        <!-- What table to insert data. If table is not exist, it will be created.\n            When query log structure is changed after system update,\n              then old table will be renamed and new table will be created automatically.\n        -->\n        <database>system</database>\n        <table>query_log</table>\n        <!--\n            PARTITION BY expr:\n        https://clickhouse.com/docs/en/table_engines/mergetree-family/custom_partitioning_key/\n            Example:\n                event_date\n                toMonday(event_date)\n                toYYYYMM(event_date)\n                toStartOfHour(event_time)\n        -->\n        <partition_by>toYYYYMM(event_date)</partition_by>\n        <!--\n            Table TTL specification:\n        https://clickhouse.com/docs/en/engines/table-engines/mergetree-family/mergetree/#mergetree-table-ttl\n            Example:\n                event_date + INTERVAL 1 WEEK\n                event_date + INTERVAL 7 DAY DELETE\n                event_date + INTERVAL 2 WEEK TO DISK 'bbb'\n\n        <ttl>event_date + INTERVAL 30 DAY DELETE</ttl>\n        -->\n\n        <!-- Instead of partition_by, you can provide full engine expression (starting with ENGINE =\n        ) with parameters,\n            Example: <engine>ENGINE = MergeTree PARTITION BY toYYYYMM(event_date) ORDER BY (event_date,\n        event_time) SETTINGS index_granularity = 1024</engine>\n          -->\n\n        <!-- Interval of flushing data. -->\n        <flush_interval_milliseconds>7500</flush_interval_milliseconds>\n    </query_log>\n\n    <!-- Trace log. Stores stack traces collected by query profilers.\n        See query_profiler_real_time_period_ns and query_profiler_cpu_time_period_ns settings. -->\n    <trace_log>\n        <database>system</database>\n        <table>trace_log</table>\n\n        <partition_by>toYYYYMM(event_date)</partition_by>\n        <flush_interval_milliseconds>7500</flush_interval_milliseconds>\n    </trace_log>\n\n    <!-- Query thread log. Has information about all threads participated in query execution.\n        Used only for queries with setting log_query_threads = 1. -->\n    <query_thread_log>\n        <database>system</database>\n        <table>query_thread_log</table>\n        <partition_by>toYYYYMM(event_date)</partition_by>\n        <flush_interval_milliseconds>7500</flush_interval_milliseconds>\n    </query_thread_log>\n\n    <!-- Query views log. Has information about all dependent views associated with a query.\n        Used only for queries with setting log_query_views = 1. -->\n    <query_views_log>\n        <database>system</database>\n        <table>query_views_log</table>\n        <partition_by>toYYYYMM(event_date)</partition_by>\n        <flush_interval_milliseconds>7500</flush_interval_milliseconds>\n    </query_views_log>\n\n    <!-- Uncomment if use part log.\n        Part log contains information about all actions with parts in MergeTree tables (creation, deletion,\n    merges, downloads).-->\n    <part_log>\n        <database>system</database>\n        <table>part_log</table>\n        <partition_by>toYYYYMM(event_date)</partition_by>\n        <flush_interval_milliseconds>7500</flush_interval_milliseconds>\n    </part_log>\n\n    <!-- Uncomment to write text log into table.\n        Text log contains all information from usual server log but stores it in structured and efficient\n    way.\n        The level of the messages that goes to the table can be limited (<level>), if not specified all\n    messages will go to the table.\n    <text_log>\n        <database>system</database>\n        <table>text_log</table>\n        <flush_interval_milliseconds>7500</flush_interval_milliseconds>\n        <level></level>\n    </text_log>\n    -->\n\n    <!-- Metric log contains rows with current values of ProfileEvents, CurrentMetrics collected\n    with \"collect_interval_milliseconds\" interval. -->\n    <metric_log>\n        <database>system</database>\n        <table>metric_log</table>\n        <flush_interval_milliseconds>7500</flush_interval_milliseconds>\n        <collect_interval_milliseconds>1000</collect_interval_milliseconds>\n    </metric_log>\n\n    <!--\n        Asynchronous metric log contains values of metrics from\n        system.asynchronous_metrics.\n    -->\n    <asynchronous_metric_log>\n        <database>system</database>\n        <table>asynchronous_metric_log</table>\n        <!--\n            Asynchronous metrics are updated once a minute, so there is\n            no need to flush more often.\n        -->\n        <flush_interval_milliseconds>7000</flush_interval_milliseconds>\n    </asynchronous_metric_log>\n\n    <!--\n        OpenTelemetry log contains OpenTelemetry trace spans.\n    -->\n    <opentelemetry_span_log>\n        <!--\n            The default table creation code is insufficient, this <engine> spec\n            is a workaround. There is no 'event_time' for this log, but two times,\n            start and finish. It is sorted by finish time, to avoid inserting\n            data too far away in the past (probably we can sometimes insert a span\n            that is seconds earlier than the last span in the table, due to a race\n            between several spans inserted in parallel). This gives the spans a\n            global order that we can use to e.g. retry insertion into some external\n            system.\n        -->\n        <engine>\n            engine MergeTree\n            partition by toYYYYMM(finish_date)\n            order by (finish_date, finish_time_us, trace_id)\n        </engine>\n        <database>system</database>\n        <table>opentelemetry_span_log</table>\n        <flush_interval_milliseconds>7500</flush_interval_milliseconds>\n    </opentelemetry_span_log>\n\n\n    <!-- Crash log. Stores stack traces for fatal errors.\n        This table is normally empty. -->\n    <crash_log>\n        <database>system</database>\n        <table>crash_log</table>\n\n        <partition_by />\n        <flush_interval_milliseconds>1000</flush_interval_milliseconds>\n    </crash_log>\n\n    <!-- Session log. Stores user log in (successful or not) and log out events. -->\n    <session_log>\n        <database>system</database>\n        <table>session_log</table>\n\n        <partition_by>toYYYYMM(event_date)</partition_by>\n        <flush_interval_milliseconds>7500</flush_interval_milliseconds>\n    </session_log>\n\n    <!-- Parameters for embedded dictionaries, used in Yandex.Metrica.\n        See https://clickhouse.com/docs/en/dicts/internal_dicts/\n    -->\n\n    <!-- Path to file with region hierarchy. -->\n    <!--\n    <path_to_regions_hierarchy_file>/opt/geo/regions_hierarchy.txt</path_to_regions_hierarchy_file> -->\n\n    <!-- Path to directory with files containing names of regions -->\n    <!-- <path_to_regions_names_files>/opt/geo/</path_to_regions_names_files> -->\n\n\n    <!-- <top_level_domains_path>/var/lib/clickhouse/top_level_domains/</top_level_domains_path> -->\n    <!-- Custom TLD lists.\n        Format: <name>/path/to/file</name>\n\n        Changes will not be applied w/o server restart.\n        Path to the list is under top_level_domains_path (see above).\n    -->\n    <top_level_domains_lists>\n        <!--\n        <public_suffix_list>/path/to/public_suffix_list.dat</public_suffix_list>\n        -->\n    </top_level_domains_lists>\n\n    <!-- Configuration of external dictionaries. See:\n        https://clickhouse.com/docs/en/sql-reference/dictionaries/external-dictionaries/external-dicts\n    -->\n    <dictionaries_config>*_dictionary.xml</dictionaries_config>\n\n    <!-- Configuration of user defined executable functions -->\n    <user_defined_executable_functions_config>*_function.xml</user_defined_executable_functions_config>\n\n    <!-- Uncomment if you want data to be compressed 30-100% better.\n        Don't do that if you just started using ClickHouse.\n      -->\n    <!--\n    <compression>\n        <!- - Set of variants. Checked in order. Last matching case wins. If nothing matches, lz4 will be\n    used. - ->\n        <case>\n\n            <!- - Conditions. All must be satisfied. Some conditions may be omitted. - ->\n            <min_part_size>10000000000</min_part_size>        <!- - Min part size in bytes. - ->\n            <min_part_size_ratio>0.01</min_part_size_ratio>   <!- - Min size of part relative to whole table\n    size. - ->\n\n            <!- - What compression method to use. - ->\n            <method>zstd</method>\n        </case>\n    </compression>\n    -->\n\n    <!-- Configuration of encryption. The server executes a command to\n        obtain an encryption key at startup if such a command is\n        defined, or encryption codecs will be disabled otherwise. The\n        command is executed through /bin/sh and is expected to write\n        a Base64-encoded key to the stdout. -->\n    <encryption_codecs>\n        <!-- aes_128_gcm_siv -->\n        <!-- Example of getting hex key from env -->\n        <!-- the code should use this key and throw an exception if its length is not 16 bytes -->\n        <!--key_hex\n        from_env=\"...\"></key_hex -->\n\n        <!-- Example of multiple hex keys. They can be imported from env or be written down in\n        config-->\n        <!-- the code should use these keys and throw an exception if their length is not 16 bytes -->\n        <!-- key_hex id=\"0\">...</key_hex -->\n        <!-- key_hex id=\"1\" from_env=\"..\"></key_hex -->\n        <!-- key_hex id=\"2\">...</key_hex -->\n        <!-- current_key_id>2</current_key_id -->\n\n        <!-- Example of getting hex key from config -->\n        <!-- the code should use this key and throw an exception if its length is not 16 bytes -->\n        <!-- key>...</key -->\n\n        <!-- example of adding nonce -->\n        <!-- nonce>...</nonce -->\n\n        <!-- /aes_128_gcm_siv -->\n    </encryption_codecs>\n\n    <!-- Allow to execute distributed DDL queries (CREATE, DROP, ALTER, RENAME) on cluster.\n        Works only if ZooKeeper is enabled. Comment it if such functionality isn't required. -->\n    <distributed_ddl>\n        <!-- Path in ZooKeeper to queue with DDL queries -->\n        <path>/clickhouse/task_queue/ddl</path>\n\n        <!-- Settings from this profile will be used to execute DDL queries -->\n        <!-- <profile>default</profile> -->\n\n        <!-- Controls how much ON CLUSTER queries can be run simultaneously. -->\n        <!-- <pool_size>1</pool_size> -->\n\n        <!--\n            Cleanup settings (active tasks will not be removed)\n        -->\n\n        <!-- Controls task TTL (default 1 week) -->\n        <!-- <task_max_lifetime>604800</task_max_lifetime> -->\n\n        <!-- Controls how often cleanup should be performed (in seconds) -->\n        <!-- <cleanup_delay_period>60</cleanup_delay_period> -->\n\n        <!-- Controls how many tasks could be in the queue -->\n        <!-- <max_tasks_in_queue>1000</max_tasks_in_queue> -->\n    </distributed_ddl>\n\n    <!-- Settings to fine tune MergeTree tables. See documentation in source code, in\n    MergeTreeSettings.h -->\n    <!--\n    <merge_tree>\n        <max_suspicious_broken_parts>5</max_suspicious_broken_parts>\n    </merge_tree>\n    -->\n\n    <!-- Protection from accidental DROP.\n        If size of a MergeTree table is greater than max_table_size_to_drop (in bytes) than table could not\n    be dropped with any DROP query.\n        If you want do delete one table and don't want to change clickhouse-server config, you could create\n    special file <clickhouse-path>/flags/force_drop_table and make DROP once.\n        By default max_table_size_to_drop is 50GB; max_table_size_to_drop=0 allows to DROP any tables.\n        The same for max_partition_size_to_drop.\n        Uncomment to disable protection.\n    -->\n    <!-- <max_table_size_to_drop>0</max_table_size_to_drop> -->\n    <!-- <max_partition_size_to_drop>0</max_partition_size_to_drop> -->\n\n    <!-- Example of parameters for GraphiteMergeTree table engine -->\n    <graphite_rollup_example>\n        <pattern>\n            <regexp>click_cost</regexp>\n            <function>any</function>\n            <retention>\n                <age>0</age>\n                <precision>3600</precision>\n            </retention>\n            <retention>\n                <age>86400</age>\n                <precision>60</precision>\n            </retention>\n        </pattern>\n        <default>\n            <function>max</function>\n            <retention>\n                <age>0</age>\n                <precision>60</precision>\n            </retention>\n            <retention>\n                <age>3600</age>\n                <precision>300</precision>\n            </retention>\n            <retention>\n                <age>86400</age>\n                <precision>3600</precision>\n            </retention>\n        </default>\n    </graphite_rollup_example>\n\n    <!-- Directory in <clickhouse-path> containing schema files for various input formats.\n        The directory will be created if it doesn't exist.\n      -->\n    <format_schema_path>/var/lib/clickhouse/format_schemas/</format_schema_path>\n\n    <!-- Default query masking rules, matching lines would be replaced with something else in the\n    logs\n        (both text logs and system.query_log).\n        name - name for the rule (optional)\n        regexp - RE2 compatible regular expression (mandatory)\n        replace - substitution string for sensitive data (optional, by default - six asterisks)\n    -->\n    <query_masking_rules>\n        <rule>\n            <name>hide encrypt/decrypt arguments</name>\n            <regexp>((?:aes_)?(?:encrypt|decrypt)(?:_mysql)?)\\s*\\(\\s*(?:'(?:\\\\'|.)+'|.*?)\\s*\\)</regexp>\n            <!-- or more secure, but also more invasive:\n                (aes_\\w+)\\s*\\(.*\\)\n            -->\n            <replace>\\1(???)</replace>\n        </rule>\n    </query_masking_rules>\n\n    <!-- Uncomment to use custom http handlers.\n        rules are checked from top to bottom, first match runs the handler\n            url - to match request URL, you can use 'regex:' prefix to use regex match(optional)\n            methods - to match request method, you can use commas to separate multiple method matches(optional)\n            headers - to match request headers, match each child element(child element name is header name),\n    you can use 'regex:' prefix to use regex match(optional)\n        handler is request handler\n            type - supported types: static, dynamic_query_handler, predefined_query_handler\n            query - use with predefined_query_handler type, executes query when the handler is called\n            query_param_name - use with dynamic_query_handler type, extracts and executes the value\n    corresponding to the <query_param_name> value in HTTP request params\n            status - use with static type, response status code\n            content_type - use with static type, response content-type\n            response_content - use with static type, Response content sent to client, when using the prefix\n    'file://' or 'config://', find the content from the file or configuration send to client.\n\n    <http_handlers>\n        <rule>\n            <url>/</url>\n            <methods>POST,GET</methods>\n            <headers><pragma>no-cache</pragma></headers>\n            <handler>\n                <type>dynamic_query_handler</type>\n                <query_param_name>query</query_param_name>\n            </handler>\n        </rule>\n\n        <rule>\n            <url>/predefined_query</url>\n            <methods>POST,GET</methods>\n            <handler>\n                <type>predefined_query_handler</type>\n                <query>SELECT * FROM system.settings</query>\n            </handler>\n        </rule>\n\n        <rule>\n            <handler>\n                <type>static</type>\n                <status>200</status>\n                <content_type>text/plain; charset=UTF-8</content_type>\n                <response_content>config://http_server_default_response</response_content>\n            </handler>\n        </rule>\n    </http_handlers>\n    -->\n\n    <send_crash_reports>\n        <!-- Changing <enabled> to true allows sending crash reports to -->\n        <!-- the ClickHouse core developers team via Sentry https://sentry.io -->\n        <!-- Doing so at least in pre-production environments is highly appreciated -->\n        <enabled>false</enabled>\n        <!-- Change <anonymize> to true if you don't feel comfortable attaching the server hostname\n        to the crash report -->\n        <anonymize>false</anonymize>\n        <!-- Default endpoint should be changed to different Sentry DSN only if you have -->\n        <!-- some in-house engineers or hired consultants who're going to debug ClickHouse issues\n        for you -->\n        <endpoint>https://6f33034cfe684dd7a3ab9875e57b1c8d@o388870.ingest.sentry.io/5226277</endpoint>\n    </send_crash_reports>\n\n    <!-- Uncomment to disable ClickHouse internal DNS caching. -->\n    <!-- <disable_internal_dns_cache>1</disable_internal_dns_cache> -->\n\n    <!-- You can also configure rocksdb like this: -->\n    <!--\n    <rocksdb>\n        <options>\n            <max_background_jobs>8</max_background_jobs>\n        </options>\n        <column_family_options>\n            <num_levels>2</num_levels>\n        </column_family_options>\n        <tables>\n            <table>\n                <name>TABLE</name>\n                <options>\n                    <max_background_jobs>8</max_background_jobs>\n                </options>\n                <column_family_options>\n                    <num_levels>2</num_levels>\n                </column_family_options>\n            </table>\n        </tables>\n    </rocksdb>\n    -->\n</yandex>"
      - type: bind
        source: ./docker/clickhouse/users.xml
        target: /etc/clickhouse-server/users.xml
        content: "<?xml version=\"1.0\"?>\n<yandex>\n    <!-- See also the files in users.d directory where the settings can be overridden. -->\n\n    <!-- Profiles of settings. -->\n    <profiles>\n        <!-- Default settings. -->\n        <default>\n            <!-- Maximum memory usage for processing single query, in bytes. -->\n            <max_memory_usage>10000000000</max_memory_usage>\n\n            <!-- How to choose between replicas during distributed query processing.\n                random - choose random replica from set of replicas with minimum number of errors\n                nearest_hostname - from set of replicas with minimum number of errors, choose replica\n                  with minimum number of different symbols between replica's hostname and local hostname\n                  (Hamming distance).\n                in_order - first live replica is chosen in specified order.\n                first_or_random - if first replica one has higher number of errors, pick a random one from replicas\n            with minimum number of errors.\n            -->\n            <load_balancing>random</load_balancing>\n\n            <allow_nondeterministic_mutations>1</allow_nondeterministic_mutations>\n\n        </default>\n\n        <!-- Profile that allows only read queries. -->\n        <readonly>\n            <readonly>1</readonly>\n        </readonly>\n\n    </profiles>\n\n    <!-- Users and ACL. -->\n    <users>\n        <!-- If user name was not specified, 'default' user is used. -->\n        <default>\n            <!-- See also the files in users.d directory where the password can be overridden.\n\n                Password could be specified in plaintext or in SHA256 (in hex format).\n\n                If you want to specify password in plaintext (not recommended), place it in 'password' element.\n                Example: <password>qwerty</password>.\n                Password could be empty.\n\n                If you want to specify SHA256, place it in 'password_sha256_hex' element.\n                Example:\n            <password_sha256_hex>65e84be33532fb784c48129675f9eff3a682b27168c0ea744b2cf58ee02337c5</password_sha256_hex>\n                Restrictions of SHA256: impossibility to connect to ClickHouse using MySQL JS client (as of July\n            2019).\n\n                If you want to specify double SHA1, place it in 'password_double_sha1_hex' element.\n                Example:\n            <password_double_sha1_hex>e395796d6546b1b65db9d665cd43f0e858dd4303</password_double_sha1_hex>\n\n                If you want to specify a previously defined LDAP server (see 'ldap_servers' in the main config) for\n            authentication,\n                  place its name in 'server' element inside 'ldap' element.\n                Example: <ldap><server>my_ldap_server</server></ldap>\n\n                If you want to authenticate the user via Kerberos (assuming Kerberos is enabled, see 'kerberos' in\n            the main config),\n                  place 'kerberos' element instead of 'password' (and similar) elements.\n                The name part of the canonical principal name of the initiator must match the user name for\n            authentication to succeed.\n                You can also place 'realm' element inside 'kerberos' element to further restrict authentication to\n            only those requests\n                  whose initiator's realm matches it.\n                Example: <kerberos />\n                Example: <kerberos><realm>EXAMPLE.COM</realm></kerberos>\n\n                How to generate decent password:\n                Execute: PASSWORD=$(base64 < /dev/urandom | head -c8); echo \"$PASSWORD\"; echo -n \"$PASSWORD\" |\n            sha256sum | tr -d '-'\n                In first line will be password and in second - corresponding SHA256.\n\n                How to generate double SHA1:\n                Execute: PASSWORD=$(base64 < /dev/urandom | head -c8); echo \"$PASSWORD\"; echo -n \"$PASSWORD\" |\n            sha1sum | tr -d '-' | xxd -r -p | sha1sum | tr -d '-'\n                In first line will be password and in second - corresponding double SHA1.\n            -->\n            <password></password>\n\n            <!-- List of networks with open access.\n\n                To open access from everywhere, specify:\n                    <ip>::/0</ip>\n\n                To open access only from localhost, specify:\n                    <ip>::1</ip>\n                    <ip>127.0.0.1</ip>\n\n                Each element of list has one of the following forms:\n                <ip> IP-address or network mask. Examples: 213.180.204.3 or 10.0.0.1/8 or 10.0.0.1/255.255.255.0\n                    2a02:6b8::3 or 2a02:6b8::3/64 or 2a02:6b8::3/ffff:ffff:ffff:ffff::.\n                <host> Hostname. Example: server01.yandex.ru.\n                    To check access, DNS query is performed, and all received addresses compared to peer address.\n                <host_regexp> Regular expression for host names. Example, ^server\\d\\d-\\d\\d-\\d\\.yandex\\.ru$\n                    To check access, DNS PTR query is performed for peer address and then regexp is applied.\n                    Then, for result of PTR query, another DNS query is performed and all received addresses compared\n            to peer address.\n                    Strongly recommended that regexp is ends with $\n                All results of DNS requests are cached till server restart.\n            -->\n            <networks>\n                <ip>::/0</ip>\n            </networks>\n\n            <!-- Settings profile for user. -->\n            <profile>default</profile>\n\n            <!-- Quota for user. -->\n            <quota>default</quota>\n\n            <!-- User can create other users and grant rights to them. -->\n            <!-- <access_management>1</access_management> -->\n        </default>\n    </users>\n\n    <!-- Quotas. -->\n    <quotas>\n        <!-- Name of quota. -->\n        <default>\n            <!-- Limits for time interval. You could specify many intervals with different limits. -->\n            <interval>\n                <!-- Length of interval. -->\n                <duration>3600</duration>\n\n                <!-- No limits. Just calculate resource usage for time interval. -->\n                <queries>0</queries>\n                <errors>0</errors>\n                <result_rows>0</result_rows>\n                <read_rows>0</read_rows>\n                <execution_time>0</execution_time>\n            </interval>\n        </default>\n    </quotas>\n</yandex>\n"
      - "clickhouse-data:/var/lib/clickhouse"
    depends_on:
      - kafka
      - zookeeper
  zookeeper:
    image: "zookeeper:3.7.0"
    volumes:
      - "zookeeper-datalog:/datalog"
      - "zookeeper-data:/data"
      - "zookeeper-logs:/logs"
  kafka:
    image: "ghcr.io/posthog/kafka-container:v2.8.2"
    depends_on:
      - zookeeper
    environment:
      - KAFKA_BROKER_ID=1001
      - KAFKA_CFG_RESERVED_BROKER_MAX_ID=1001
      - "KAFKA_CFG_LISTENERS=PLAINTEXT://:9092"
      - "KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092"
      - "KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181"
      - ALLOW_PLAINTEXT_LISTENER=yes
  object_storage:
    image: "minio/minio:RELEASE.2022-06-25T15-50-16Z"
    environment:
      - MINIO_ROOT_USER=$SERVICE_USER_MINIO
      - MINIO_ROOT_PASSWORD=$SERVICE_PASSWORD_MINIO
    entrypoint: sh
    command: '-c ''mkdir -p /data/posthog && minio server --address ":19000" --console-address ":19001" /data'''
    volumes:
      - "object_storage:/data"
  maildev:
    image: "maildev/maildev:2.0.5"
  flower:
    image: "mher/flower:2.0.0"
    environment:
      FLOWER_PORT: 5555
      CELERY_BROKER_URL: "redis://redis:6379"
  web:
    image: "posthog/posthog:latest"
    command: /compose/start
    volumes:
      - type: bind
        source: ./compose/start
        target: /compose/start
        content: "#!/bin/bash\n/compose/wait\n./bin/migrate\n./bin/docker-server\n"
      - type: bind
        source: ./compose/wait
        target: /compose/wait
        content: "#!/usr/bin/env python3\n\nimport socket\nimport time\n\ndef loop():\n    print(\"Waiting for ClickHouse and Postgres to be ready\")\n    try:\n        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:\n            s.connect(('clickhouse', 9000))\n        print(\"Clickhouse is ready\")\n        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:\n            s.connect(('db', 5432))\n        print(\"Postgres is ready\")\n    except ConnectionRefusedError as e:\n        time.sleep(5)\n        loop()\n\nloop()\n"
    environment:
      - SERVICE_FQDN_WEB_8000
      - OPT_OUT_CAPTURING=true
      - DISABLE_SECURE_SSL_REDIRECT=true
      - IS_BEHIND_PROXY=true
      - TRUST_ALL_PROXIES=true
      - "DATABASE_URL=postgres://posthog:$SERVICE_PASSWORD_POSTGRES@db:5432/posthog"
      - CLICKHOUSE_HOST=clickhouse
      - CLICKHOUSE_DATABASE=posthog
      - CLICKHOUSE_SECURE=false
      - CLICKHOUSE_VERIFY=false
      - KAFKA_HOSTS=kafka
      - "REDIS_URL=redis://redis:6379/"
      - PGHOST=db
      - PGUSER=posthog
      - PGPASSWORD=$SERVICE_PASSWORD_POSTGRES
      - DEPLOYMENT=hobby
      - SITE_URL=$SERVICE_FQDN_WEB
      - SECRET_KEY=$SERVICE_BASE64_64_SECRETKEY
      - "ENCRYPTION_SALT_KEYS=${SERVICE_ENCRYPTION_SALT_KEYS:-00beef0000beef0000beef0000beef00}"
    depends_on:
      - db
      - redis
      - clickhouse
      - kafka
      - object_storage
  worker:
    image: "posthog/posthog:latest"
    command: "./bin/docker-worker-celery --with-scheduler"
    environment:
      - OPT_OUT_CAPTURING=true
      - DISABLE_SECURE_SSL_REDIRECT=true
      - IS_BEHIND_PROXY=true
      - TRUST_ALL_PROXIES=true
      - "DATABASE_URL=postgres://posthog:$SERVICE_PASSWORD_POSTGRES@db:5432/posthog"
      - CLICKHOUSE_HOST=clickhouse
      - CLICKHOUSE_DATABASE=posthog
      - CLICKHOUSE_SECURE=false
      - CLICKHOUSE_VERIFY=false
      - KAFKA_HOSTS=kafka
      - "REDIS_URL=redis://redis:6379/"
      - PGHOST=db
      - PGUSER=posthog
      - PGPASSWORD=$SERVICE_PASSWORD_POSTGRES
      - DEPLOYMENT=hobby
      - SITE_URL=$SERVICE_FQDN_WEB
      - SECRET_KEY=$SERVICE_BASE64_64_SECRETKEY
      - "ENCRYPTION_SALT_KEYS=${SERVICE_ENCRYPTION_SALT_KEYS:-00beef0000beef0000beef0000beef00}"
    depends_on:
      - db
      - redis
      - clickhouse
      - kafka
      - object_storage
  plugins:
    image: "posthog/posthog:latest"
    command: "./bin/plugin-server --no-restart-loop"
    environment:
      - "DATABASE_URL=postgres://posthog:$SERVICE_PASSWORD_POSTGRES@db:5432/posthog"
      - "KAFKA_HOSTS=kafka:9092"
      - "REDIS_URL=redis://redis:6379/"
      - CLICKHOUSE_HOST=clickhouse
      - CLICKHOUSE_DATABASE=posthog
      - CLICKHOUSE_SECURE=false
      - CLICKHOUSE_VERIFY=false
      - SITE_URL=$SERVICE_FQDN_WEB
      - SECRET_KEY=$SERVICE_BASE64_64_SECRETKEY
      - "ENCRYPTION_SALT_KEYS=${SERVICE_ENCRYPTION_SALT_KEYS:-00beef0000beef0000beef0000beef00}"
    depends_on:
      - db
      - redis
      - clickhouse
      - kafka
      - object_storage
  elasticsearch:
    image: "elasticsearch:7.16.2"
    environment:
      - cluster.routing.allocation.disk.threshold_enabled=true
      - cluster.routing.allocation.disk.watermark.low=512mb
      - cluster.routing.allocation.disk.watermark.high=256mb
      - cluster.routing.allocation.disk.watermark.flood_stage=128mb
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms256m -Xmx256m"
      - xpack.security.enabled=false
    volumes:
      - "elasticsearch-data:/var/lib/elasticsearch/data"
  temporal:
    image: "temporalio/auto-setup:1.20.0"
    environment:
      - DB=postgresql
      - DB_PORT=5432
      - POSTGRES_USER=posthog
      - POSTGRES_PWD=$SERVICE_PASSWORD_POSTGRES
      - POSTGRES_SEEDS=db
      - DYNAMIC_CONFIG_FILE_PATH=config/dynamicconfig/development-sql.yaml
      - ENABLE_ES=true
      - ES_SEEDS=elasticsearch
      - ES_VERSION=v7
      - ENABLE_ES=false
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - type: bind
        source: ./docker/temporal/dynamicconfig/development-sql.yaml
        target: /etc/temporal/config/dynamicconfig/development-sql.yaml
        content: "limit.maxIDLength:\n    - value: 255\n      constraints: {}\nsystem.forceSearchAttributesCacheRefreshOnRead:\n    - value: false\n      constraints: {}\n"
  temporal-admin-tools:
    image: "temporalio/admin-tools:1.20.0"
    depends_on:
      - temporal
    environment:
      - "TEMPORAL_CLI_ADDRESS=temporal:7233"
    stdin_open: true
    tty: true
  temporal-ui:
    image: "temporalio/ui:2.10.3"
    depends_on:
      - temporal
    environment:
      - "TEMPORAL_ADDRESS=temporal:7233"
      - "TEMPORAL_CORS_ORIGINS=http://localhost:3000"
  temporal-django-worker:
    image: "posthog/posthog:latest"
    command: ./bin/temporal-django-worker
    environment:
      - DISABLE_SECURE_SSL_REDIRECT=true
      - IS_BEHIND_PROXY=true
      - TRUST_ALL_PROXIES=true
      - "DATABASE_URL=postgres://posthog:$SERVICE_PASSWORD_POSTGRES@db:5432/posthog"
      - CLICKHOUSE_HOST=clickhouse
      - CLICKHOUSE_DATABASE=posthog
      - CLICKHOUSE_SECURE=false
      - CLICKHOUSE_VERIFY=false
      - KAFKA_HOSTS=kafka
      - "REDIS_URL=redis://redis:6379/"
      - PGHOST=db
      - PGUSER=posthog
      - PGPASSWORD=$SERVICE_PASSWORD_POSTGRES
      - DEPLOYMENT=hobby
      - SITE_URL=$SERVICE_FQDN_WEB
      - SECRET_KEY=$SERVICE_BASE64_64_SECRETKEY
      - "ENCRYPTION_SALT_KEYS=${SERVICE_ENCRYPTION_SALT_KEYS:-00beef0000beef0000beef0000beef00}"
      - TEMPORAL_HOST=temporal
    depends_on:
      - db
      - redis
      - clickhouse
      - kafka
      - object_storage
      - temporal
